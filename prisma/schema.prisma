// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id        String   @id @default(cuid())
    clerkId   String   @unique
    email     String   @unique
    name      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    transactions    Transaction[]
    categories      Category[]
    budgets         Budget[]
    savingsGoals    SavingsGoal[]
    recurringItems  RecurringItem[]

    @@index([clerkId])
}

model Transaction {
    id              String    @id @default(cuid())
    userId          String
    description     String
    amount          Decimal   @db.Decimal(12, 2)
    date            DateTime
    type            TransactionType
    categoryId      String?
    isRecurring     Boolean   @default(false)
    recurringItemId String?
    aiCategorized   Boolean   @default(false)
    notes           String?
    createdAt       DateTime  @default(now())
    updatedAt       DateTime  @updatedAt

    user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
    category       Category?       @relation(fields: [categoryId], references: [id])
    recurringItem  RecurringItem?  @relation(fields: [recurringItemId], references: [id])

    @@index([userId])
    @@index([categoryId])
    @@index([date])
    @@index([type])
}

model Category {
    id           String   @id @default(cuid())
    userId       String
    name         String
    type         TransactionType
    color        String?
    icon         String?
    budgetLimit  Decimal? @db.Decimal(12, 2)
    isDefault    Boolean  @default(false)
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt

    user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    transactions Transaction[]
    budgets      Budget[]

    @@unique([userId, name])
    @@index([userId])
    @@index([type])
}

model Budget {
    id          String   @id @default(cuid())
    userId      String
    categoryId  String
    amount      Decimal  @db.Decimal(12, 2)
    spent       Decimal  @db.Decimal(12, 2) @default(0)
    month       Int
    year        Int
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    category    Category @relation(fields: [categoryId], references: [id])

    @@unique([userId, categoryId, month, year])
    @@index([userId])
    @@index([categoryId])
    @@index([month, year])
}

model SavingsGoal {
    id            String   @id @default(cuid())
    userId        String
    name          String
    targetAmount  Decimal  @db.Decimal(12, 2)
    currentAmount Decimal  @db.Decimal(12, 2) @default(0)
    targetDate    DateTime?
    achieved      Boolean  @default(false)
    achievedAt    DateTime?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model RecurringItem {
    id           String              @id @default(cuid())
    userId       String
    description  String
    amount       Decimal             @db.Decimal(12, 2)
    type         TransactionType
    frequency    RecurringFrequency
    dayOfMonth   Int?
    dayOfWeek    Int?
    startDate    DateTime
    endDate      DateTime?
    nextDueDate  DateTime
    isActive     Boolean             @default(true)
    createdAt    DateTime            @default(now())
    updatedAt    DateTime            @updatedAt

    user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
    transactions Transaction[]

    @@index([userId])
    @@index([nextDueDate])
    @@index([isActive])
}

enum TransactionType {
    INCOME
    EXPENSE
}

enum RecurringFrequency {
    DAILY
    WEEKLY
    BIWEEKLY
    MONTHLY
    QUARTERLY
    YEARLY
}